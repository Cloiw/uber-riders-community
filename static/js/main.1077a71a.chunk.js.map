{"version":3,"sources":["logo.svg","Maps.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","google","window","Maps","props","mapsRef","React","createRef","state","lat","long","last_coordinate","map","loaded_map","position","this","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","mapOptions","zoom","center","lng","maps","Map","current","watchPosition","isWeaIgual","console","log","setState","Marker","title","setMap","TransitLayer","id","ref","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,2HCErCC,EAASC,OAAOD,OAoEPE,E,YAjEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,QAAUC,IAAMC,YACrB,EAAKC,MAAQ,CAAEC,IAAK,WAAYC,MAAO,YACvC,EAAKC,gBAAkB,CAACF,IAAK,EAAGC,KAAK,GACrC,EAAKE,IAAM,KACX,EAAKC,YAAa,EAND,E,wEASRC,GACT,OAAQC,KAAKJ,gBAAgBF,MAAQK,EAASE,OAAOC,UAAYF,KAAKJ,gBAAgBD,OAASI,EAASE,OAAOE,Y,wFAO5F,IAAD,OAClBC,UAAUC,YAAYC,oBAAmB,SAACP,GACxC,IAAIQ,EAAa,CACfC,KAAM,GACNC,OAAQ,CAAEf,IAAKK,EAASE,OAAOC,SAAUQ,IAAMX,EAASE,OAAOE,YAEjE,EAAKN,IAAM,IAAIX,EAAOyB,KAAKC,IAAI,EAAKtB,QAAQuB,QAASN,GACrD,EAAKT,YAAa,KAGpBM,UAAUC,YAAYS,eAAc,SAACf,IAChC,EAAKgB,WAAWhB,IAAc,EAAKD,aAGtC,EAAKF,gBAAgBF,IAAMK,EAASE,OAAOC,SAC3C,EAAKN,gBAAgBD,KAAOI,EAASE,OAAOE,UAC5Ca,QAAQC,IAAI,cACZ,EAAKC,SAAS,CACZxB,IAAKK,EAASE,OAAOC,SACrBP,KAAMI,EAASE,OAAOE,YAGxBa,QAAQC,IAAI,EAAKxB,OAEJ,IAAIP,EAAOyB,KAAKQ,OAAO,CAClCpB,SAAU,CAAEL,IAAKK,EAASE,OAAOC,SAAUQ,IAAMX,EAASE,OAAOE,WACjEN,IAAK,EAAKA,IACVuB,MAAO,sBAEFC,OAAO,EAAKxB,MAGA,IAAIX,EAAOyB,KAAKW,cACtBD,OAAO,EAAKxB,W,+BAQ3B,OACE,yBAAK0B,GAAG,SAASC,IAAKxB,KAAKV,c,GA5DdmC,aCYJC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAGlB,kBAAC,EAAD,QCCcC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1077a71a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\n\r\nconst google = window.google;\r\n\r\nclass Maps extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mapsRef = React.createRef();\r\n    this.state = { lat: 33.4107511, long: -70.6335647 }\r\n    this.last_coordinate = {lat: 0, long:0};\r\n    this.map = null;\r\n    this.loaded_map = false;\r\n  }\r\n  \r\n  isWeaIgual(position){\r\n    return (this.last_coordinate.lat === position.coords.latitude && this.last_coordinate.long === position.coords.longitude);\r\n  }\r\n  \r\n  componentWillMount() {\r\n  }\r\n  \r\n  \r\n  componentDidMount() {   \r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      let mapOptions = {\r\n        zoom: 20,\r\n        center: { lat: position.coords.latitude, lng:  position.coords.longitude }\r\n      };\r\n      this.map = new google.maps.Map(this.mapsRef.current, mapOptions);\r\n      this.loaded_map = true;\r\n    })\r\n    \r\n    navigator.geolocation.watchPosition((position) => {\r\n      if(this.isWeaIgual(position) || !this.loaded_map){\r\n        return;\r\n      }\r\n      this.last_coordinate.lat = position.coords.latitude;\r\n      this.last_coordinate.long = position.coords.longitude;\r\n      console.log(\"moviending\")\r\n      this.setState({\r\n        lat: position.coords.latitude,\r\n        long: position.coords.longitude\r\n        \r\n      })\r\n      console.log(this.state)\r\n      \r\n      var marker = new google.maps.Marker({\r\n        position: { lat: position.coords.latitude, lng:  position.coords.longitude },\r\n        map: this.map,\r\n        title: 'EStoy aquiiiiiii!'\r\n      });\r\n      marker.setMap(this.map)\r\n\r\n\r\n      let transitLayer = new google.maps.TransitLayer();\r\n      transitLayer.setMap(this.map);\r\n\r\n    }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"divMap\" ref={this.mapsRef} ></div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Maps;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './index.css';\r\nimport Maps from './Maps'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n       \r\n      </header>\r\n      <Maps />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}